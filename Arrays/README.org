#+title: Arrays

* TABLE OF CONTENTS :TOC:
- [[#121-best-time-to-sell-stocks][121. Best time to Sell Stocks]]
  - [[#description][Description]]
  - [[#examples][Examples]]
  - [[#submissions][Submissions]]
- [[#217-contains-duplicate][217. Contains Duplicate]]
  - [[#description-1][Description]]
  - [[#submission][Submission]]
- [[#238-move-zeroes][238. Move Zeroes]]
  - [[#description-2][Description]]
  - [[#examples-1][Examples]]
  - [[#submissions-1][Submissions]]
- [[#1431-kids-with-greatest-candies][1431. Kids With Greatest Candies]]
  - [[#description-3][Description]]
  - [[#examples-2][Examples]]
  - [[#submissions-2][Submissions]]
- [[#1470-shuffle-the-array][1470. Shuffle the Array]]
  - [[#description-4][Description]]
  - [[#examples-3][Examples]]
  - [[#constraints][Constraints]]
  - [[#submissions-3][Submissions]]
- [[#1929-concatenation-of-array][1929. Concatenation of Array]]
  - [[#description-5][Description]]
  - [[#examples-4][Examples]]
  - [[#constraints-1][Constraints]]
  - [[#submissions-4][Submissions]]
- [[#2011-final-value-after-operations][2011. Final Value After Operations]]
  - [[#description-6][Description]]
  - [[#examples-5][Examples]]
  - [[#constraints-2][Constraints]]
  - [[#submissions-5][Submissions]]

* 121. Best time to Sell Stocks
** Description
/Difficulty: Easy/

You are given an array =prices= where =prices[i]= is the price of a given stock on
the =i^{th}=  day.

You want to maximize your profit by choosing a *single day* to buy one stock and
choosing a *different day in the future*  to sell that stock.

Return /the maximum profit you can achieve from this transaction/. If you cannot
achieve any profit, return =0= .

** Examples
*Example 1:*

#+begin_src
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

#+end_src

*Example 2:*

#+begin_src
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

#+end_src

** Submissions
*** Submission 1
/Time limit exceeded/

For my j-loop, I set j to 1, and dabbled around with the condition. This didn't
work because j goes back to the second element for every i-iteration, causing
the profits to mess up

#+begin_src js
const prices = [7, 1, 5, 3, 6, 4];
console.log(maxProfit(prices));

function maxProfit(prices) {
  let profit = 0;
  for (let i = 0; i < prices.length; i++) {
    for (let j = i + 1; j < prices.length; j++) {
      if (prices[i] < prices[j] && i > j) {
        const currentProfit = prices[j] - prices[i];
        if (currentProfit > profit) profit = currentProfit;
      }
    }
  }
  return profit;
}
#+end_src

*** Submission 2
I found this solution online. They used 2 pointers instead of nested loops

#+begin_src js
const prices = [1, 2, 3, 4, 5];
return maxProfit(prices);

function maxProfit(prices) {
  let profit = 0;
  let leftPointer = 0;
  let rightPointer = 1;

  while (rightPointer < prices.length) {
    console.log(`${prices[rightPointer]} - ${prices[leftPointer]}`);
    if (prices[leftPointer] < prices[rightPointer]) {
      const currentProfit = prices[rightPointer] - prices[leftPointer];
      if (currentProfit > profit) {
        profit = currentProfit;
      }
    } else {
      leftPointer = rightPointer;
    }
    rightPointer++;
    console.log('----------');
  }
  return profit;
}
#+end_src

#+RESULTS:
: 2 - 1
: ----------
: 3 - 1
: ----------
: 4 - 1
: ----------
: 5 - 1
: ----------
: 4

* 217. Contains Duplicate
** Description
Given an integer array =nums=, return =true= if any value appears *at least twice* in
the array, and return =false=  if every element is distinct.

** Submission
#+begin_src js
const nums = [1, 2, 3, 1];

containsDuplicate(nums);

/**
 * @param {number[]} nums
 * @returns `true` if any value appears twic in the array,
 * `false` if every element is distinct
 */
function containsDuplicate(nums) {
  const map = {};
  for (let num of nums) {
    if (!(num in map)) {
      map[num] = 1;
    } else {
      return true;
    }
  }
  console.log(map);
  return false;
}


#+end_src

* 238. Move Zeroes
** Description
/Difficulty: Easy/

Given an integer array =nums=, move all =0= 's to the end of it while maintaining the relative order of the non-zero elements.

*Note*  that you must do this in-place without making a copy of the array.

** Examples
*Example 1:*

#+begin_src
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

#+end_src

*Example 2:*

#+begin_src
Input: nums = [0]
Output: [0]

#+end_src

*Constraints:*

- ~1 <= nums.length <= 10^{4}~
- ~-2^{31} <= nums[i] <= 2^{31} - 1~

 *Follow up:*  Could you minimize the total number of operations done?

** Submissions
Since the array can't be copied (i.e. using =filter=), my first thought was going
through the array and check if the current index is zero. If so, then I remove
it and place it at the end of the array

However, this solution didn't work for all cases

#+begin_src js
const zeroes = [0, 0, 1];
moveZeroes(zeroes)
return zeroes;

function moveZeroes(nums) {
    for (let i = 0; i < nums.length; i++) {
        if (nums[i] === 0) {
            const zero = nums.splice(i, 1);
            nums.push(zero)
        }
    }
};
#+end_src

#+RESULTS:
| 0 | 1 | (0) |

The =i= would skip elements after they are swapped. I fixed this just by decrementing =i= after the swap operation

#+begin_src js
const zeroes = [0, 0, 1];
moveZeroes(zeroes)
return zeroes;

function moveZeroes(nums) {
    for (let i = 0; i < nums.length; i++) {
        if (nums[i] === 0) {
            const zero = nums.splice(i, 1);
            nums.push(zero)
            i--;
        }
    }
};
#+end_src

#+RESULTS:
| 1 | (0) | (0) |

* 1431. Kids With Greatest Candies
** Description
/Difficulty: Easy/

There are =n= kids with candies. You are given an integer array =candies=, where
each =candies[i]= represents the number of candies the =i^{th}= kid has, and an
integer =extraCandies= , denoting the number of extra candies that you have.

Return /a boolean array/  =result=  /of length/  =n= /, where/  =result[i]=  /is/  =true=  /if,
after giving the/  =i^{th}=  /kid all the/  =extraCandies=  /, they will have the
*greatest*  number of candies among all the kids/ /, or/  =false=   /otherwise/ .

Note that *multiple* kids can have the *greatest*  number of candies.

** Examples
*Example 1:*

#+begin_src
Input: candies = [2,3,5,1,3], extraCandies = 3
Output: [true,true,true,false,true]
Explanation: If you give all extraCandies to:
- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.
- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.
- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.
- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.
- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.

#+end_src

*Example 2:*

#+begin_src
Input: candies = [4,2,1,1,2], extraCandies = 1
Output: [true,false,false,false,false]
Explanation: There is only 1 extra candy.
Kid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.

#+end_src

*Example 3:*

#+begin_src
Input: candies = [12,1,12], extraCandies = 10
Output: [true,false,true]
#+end_src

** Submissions
*** Submission 1
/Runtime: 65 ms/ - Beats 61.58%
/Memory: 44.1 MB/ - Beats 5.64%

This solution is too memory intensive

#+begin_src js
let candies = [2, 3, 5, 1, 3];
return kidsWithCandies(candies, 3);


/**
 * @param {number[]} candies
 * @param {number} extraCandies
 * @return {boolean[]}
 */
function kidsWithCandies(candies, extraCandies) {
  const candiesCopy = [...candies];
  const maxCandy = candies.sort((a, b) => a - b).reverse()[0];
  const results = [];
  for (let candy of candiesCopy) {
    results.push(candy + extraCandies >= maxCandy);
  }
  return results;
}
#+end_src

#+RESULTS:
| true | true | true | false | true |

*** Submission 2
/Runtime: 54 ms/ - Beats 95.86%
/Memory: 42.9 MB/ - Beats 11.58%

Way faster from having to do array operations. Also used the =max()= function.
Still pretty memory intensive though

#+begin_src js
let candies = [2, 3, 5, 1, 3];
return kidsWithCandies(candies, 3);

/**
 ,* @param {number[]} candies
 ,* @param {number} extraCandies
 ,* @return {boolean[]}
 ,*/
function kidsWithCandies(candies, extraCandies) {
  const maxCandy = Math.max(...candies);
  const results = [];
  for (let candy of candies) {
    results.push(candy + extraCandies >= maxCandy);
  }
  return results;
}


#+end_src

#+RESULTS:
| true | true | true | false | true |

*** Submission 3
/Runtime: 42 ms/ - Beats 99.92%
/Memory: 42.9 MB/ - Beats 11.58%

A lot faster. Still big use of memory

#+begin_src js
let candies = [2, 3, 5, 1, 3];
return kidsWithCandies(candies, 3);

/**
 ,* @param {number[]} candies
 ,* @param {number} extraCandies
 ,* @return {boolean[]}
 ,*/
function kidsWithCandies(candies, extraCandies) {
  const maxCandy = Math.max(...candies);
  return candies.map((candy) => candy + extraCandies >= maxCandy);
}
#+end_src

#+RESULTS:
| true | true | true | false | true |

* 1470. Shuffle the Array
** Description
Given the array =nums= consisting of =2n= elements in the form =[x_{1},x_{2},...,x_{n},y_{1},y_{2},...,y_{n}]= .

/Return the array in the form/ =[x_{1},y_{1},x_{2},y_{2},...,x_{n},y_{n}]= .

** Examples
*Example 1:*
#+begin_src js
Input: nums = [2,5,1,3,4,7], n = 3
Output: [2,3,5,4,1,7]
Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].

#+end_src

*Example 2:*
#+begin_src js
Input: nums = [1,2,3,4,4,3,2,1], n = 4
Output: [1,4,2,3,3,2,4,1]

#+end_src

*Example 3:*
#+begin_src js
Input: nums = [1,1,2,2], n = 2
Output: [1,2,1,2]

#+end_src

** Constraints

- ~1 <= n <= 500~
- ~nums.length == 2n~
- ~1 <= nums[i] <= 10^3~

** Submissions
*** Submission 1
/Runtime: 74 ms/ - beats 56.76%
/Memory: 44.5 MB/ - beats 45.29%

Really easy. Just split the array at its middle point since all arrays should be
of even length

#+begin_src js
function shuffle(nums, n) {
  const firstHalf = nums.splice(0, n);
  const secondHalf = nums;
  const shuffled = [];
  for (let i = 0; i < firstHalf.length; i++) {
    shuffled.push(firstHalf[i]);
    shuffled.push(secondHalf[i]);
  }
  return shuffled;
}
#+end_src

*** Submission 2
/Runtime: 74 ms/ - beats 56.76%
/Memory: 44.5 MB/ - beats 45.29%

Simpler solution. TIL that you can have more parameters in a =push()= function

#+begin_src js
function shuffle(nums, n) {
  const shuffled = [];
  for (let i = 0; i < n; i++) {
    shuffled.push(nums[i], nums[i + n]);
  }
  return shuffled;
}
#+end_src

* 1929. Concatenation of Array
** Description
/Difficulty: Easy/

Given an integer array =nums= of length =n=, you want to create an array =ans= of length =2n= where ~ans[i] == nums[i]~ and ~ans[i + n] == nums[i]~ for ~0 <= i < n~  ( *0-indexed* ).

Specifically, =ans= is the *concatenation* of two =nums=  arrays.

Return /the array/  =ans= .

** Examples
*Example 1:*

#+begin_src js
Input: nums = [1,2,1]
Output: [1,2,1,1,2,1]
Explanation: The array ans is formed as follows:
- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]
- ans = [1,2,1,1,2,1]
#+end_src

*Example 2:*

#+begin_src js
Input: nums = [1,3,2,1]
Output: [1,3,2,1,1,3,2,1]
Explanation: The array ans is formed as follows:
- ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]
- ans = [1,3,2,1,1,3,2,1]

#+end_src

** Constraints

- ~n == nums.length~
- ~1 <= n <= 1000~
- ~1 <= nums[i] <= 1000~

** Submissions
This was a really easy problem. Here's my first solution:

#+begin_src js
return getconcatenation([1, 2, 3, 4])

function getconcatenation(nums) {
  return [...nums, ...nums]
}
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 | 1 | 2 | 3 | 4 |

Turns out JavaScript also has a concatenation function =concat= that does the same
thing

#+begin_src js
return getconcatenation([1, 2, 3, 4])

function getconcatenation(nums) {
  return nums.concat(nums)
}

#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 | 1 | 2 | 3 | 4 |


* 2011. Final Value After Operations
** Description
There is a programming language with only *four* operations and *one* variable =X= :

- =++X= and =X++= *increments* the value of the variable =X= by =1= .
- =--X= and =X--= *decrements* the value of the variable =X= by =1= .

Initially, the value of =X= is =0= .

Given an array of strings =operations= containing a list of operations, return /the
*final* value of/  =X= /after performing all the operations/ .

** Examples
*Example 1:*

#+begin_src
Input: operations = ["--X","X++","X++"]
Output: 1
Explanation: The operations are performed as follows:
Initially, X = 0.
--X: X is decremented by 1, X =  0 - 1 = -1.
X++: X is incremented by 1, X = -1 + 1 =  0.
X++: X is incremented by 1, X =  0 + 1 =  1.

#+end_src

*Example 2:*

#+begin_src
Input: operations = ["++X","++X","X++"]
Output: 3
Explanation: The operations are performed as follows:
Initially, X = 0.
++X: X is incremented by 1, X = 0 + 1 = 1.
++X: X is incremented by 1, X = 1 + 1 = 2.
X++: X is incremented by 1, X = 2 + 1 = 3.

#+end_src

*Example 3:*

#+begin_src
Input: operations = ["X++","++X","--X","X--"]
Output: 0
Explanation: The operations are performed as follows:
Initially, X = 0.
X++: X is incremented by 1, X = 0 + 1 = 1.
++X: X is incremented by 1, X = 1 + 1 = 2.
--X: X is decremented by 1, X = 2 - 1 = 1.
X--: X is decremented by 1, X = 1 - 1 = 0.

#+end_src

** Constraints

- ~1 <= operations.length <= 100~
- =operations[i]= will be either ="++X"=, ="X++"=, ="--X"=, or ="X--"= .

** Submissions
*** Submission 1
/Runtime: 67 ms/ - Beats 60.22%
/Memory: 44.2 MB/ - Beats 9.69%

Relatively fast, but uses a lot of memory

#+begin_src js
const operations = ['--X', 'X++', 'X++'];
return finalValueAfterOperations(operations);

/**
 * @param {string[]} operations
 * @returns {number}
 */
function finalValueAfterOperations(operations) {
  let X = 0;
  for (let operation of operations) {
    operation.includes('+') ? X++ : X--;
  }
  return X;
}
#+end_src

#+RESULTS:
: 1

*** Submission 2
/Runtime: 68 ms/ - Beats 56.23%
/Memory: 43.9 MB/ - Beats 13.25%

#+begin_src js
const operations = ['--X', 'X++', 'X++'];
return finalValueAfterOperations(operations);

/**
 ,* @param {string[]} operations
 ,* @returns {number}
 ,*/
function finalValueAfterOperations(operations) {
  let X = 0;
  for (let operation of operations) {
    operation === 'X++' || operation === '++X' ? X++ : X--;
  }
  return X;
}
#+end_src

#+RESULTS:
: 1

*** Submission 3
/Runtime: 62 ms/ - Beats 79.23%
/Memory: 42.6 MB/ - Beats 39%

I changed the =for (let of)= to a for loop with an iterable value. ChatGPT says
the latter is a more efficient loop for large arrays

#+begin_src js
const operations = ['--X', 'X++', 'X++'];
return finalValueAfterOperations(operations);

function finalValueAfterOperations(operations) {
  let X = 0;
  for (let i = 0; i < operations.length; i++) {
    operations[i] === 'X++' || operations[i] === '++X' ? X++ : X--;
  }
  return X;
}
#+end_src

*** Submission 3
/Runtime: 57 ms/ - Beats 92.84%
/Memory: 42.6 MB/ - Beats 78.68%

I removed the ternary condition and the function performed way better

#+begin_src js
const operations = ['--X', 'X++', 'X++'];
return finalValueAfterOperations(operations);

/**
 ,* @param {string[]} operations
 ,* @return {number}
 ,*/
function finalValueAfterOperations(operations) {
   let X = 0;
   for (let i = 0; i < operations.length; i++)  {
       if(operations[i] === 'X++' || operations[i] === '++X') {
           X++;
       }
       else if(operations[i] === 'X--' || operations[i] === '--X') {
           X--;
       }
   }
   return X;
};
#+end_src

#+RESULTS:
: 1
