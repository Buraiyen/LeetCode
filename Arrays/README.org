#+title: Arrays

* TABLE OF CONTENTS :TOC:
- [[#238-move-zeroes][238. Move Zeroes]]
  - [[#description][Description]]
  - [[#examples][Examples]]
  - [[#submissions][Submissions]]

* 238. Move Zeroes
** Description
Given an integer array =nums=, move all =0= 's to the end of it while maintaining the relative order of the non-zero elements.

*Note*  that you must do this in-place without making a copy of the array.

** Examples
*Example 1:*

#+begin_src
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

#+end_src

*Example 2:*

#+begin_src
Input: nums = [0]
Output: [0]

#+end_src

*Constraints:*

- ~1 <= nums.length <= 10^{4}~
- ~-2^{31} <= nums[i] <= 2^{31} - 1~

 *Follow up:*  Could you minimize the total number of operations done?

** Submissions
Since the array can't be copied (i.e. using =filter=), my first thought was going
through the array and check if the current index is zero. If so, then I remove
it and place it at the end of the array

However, this solution didn't work for all cases

#+begin_src js
const zeroes = [0, 0, 1];
moveZeroes(zeroes)
return zeroes;

function moveZeroes(nums) {
    for (let i = 0; i < nums.length; i++) {
        if (nums[i] === 0) {
            const zero = nums.splice(i, 1);
            nums.push(zero)
        }
    }
};
#+end_src

#+RESULTS:
| 0 | 1 | (0) |

The =i= would skip elements after they are swapped. I fixed this just by decrementing =i= after the swap operation

#+begin_src js
const zeroes = [0, 0, 1];
moveZeroes(zeroes)
return zeroes;

function moveZeroes(nums) {
    for (let i = 0; i < nums.length; i++) {
        if (nums[i] === 0) {
            const zero = nums.splice(i, 1);
            nums.push(zero)
            i--;
        }
    }
};
#+end_src

#+RESULTS:
| 1 | (0) | (0) |
