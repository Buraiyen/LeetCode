#+title: Strings

* TABLE OF CONTENTS :TOC:
- [[#344-reverse-a-string][344. Reverse a String]]
  - [[#description][Description]]
  - [[#examples][Examples]]
  - [[#constraints][Constraints]]
  - [[#submissions][Submissions]]
- [[#1528-shuffle-string][1528. Shuffle String]]
  - [[#description-1][Description]]
  - [[#examples-1][Examples]]
  - [[#submissions-1][Submissions]]
- [[#1678-goal-parser][1678. Goal Parser]]
  - [[#description-2][Description]]
  - [[#examples-2][Examples]]
  - [[#constraints-1][Constraints]]
  - [[#submissions-2][Submissions]]

* 344. Reverse a String
** Description
/Difficulty: Easy/
/Acceptance: 76.7%/

Write a function that reverses a string. The input string is given as an array
of characters s.

You must do this by modifying the input array in-place with O(1) extra memory.

** Examples
*Example 1*

#+begin_src js
Input: s = ["h","e","l","l","o"]
Output: ["o","l","l","e","h"]
#+end_src

*Example 2*
#+begin_src js
Input: s = ["H","a","n","n","a","h"]
Output: ["h","a","n","n","a","H"]
#+end_src

** Constraints
- ~1 <= s.length <= 10^{5}~
- =s[i]= is a [[https://en.wikipedia.org/wiki/ASCII#Printable_characters][printable ascii character]] - so "" is not a valid character

** Submissions
*** Submission 1
/Runtime: 92ms/ - beats 71.34%
/Memory: 49.1 MB/ - beats 69.86%

Obviously this is not what the problem asked, but I wanted to try it out

#+begin_src js
/**
 ,* @param {character[]} s
 ,* @return {void} Do not return anything, modify s in-place instead.
 ,*/
var reverseString = function(s) {
   s.reverse();
};

const s = ['B', 'r', 'i','a', 'n']
reverseString(s);
return s;
#+end_src

#+RESULTS:
| n | a | i | r | B |

*** Submission 2
/Runtime: 100 ms/ - beats 71.34%
/Memory: 49.1 MB/ - beats 61.54%

Took longer than the first submission, but the same amount of memory. Strangely
Leetcode says that it beats less, event though it uses the same memory

After looking at the hint that says I would need two pointers from the beginning and end of the string, I set it up like this

#+begin_src js
let leftPoint = 0;
let rightPoint = s.length - 1;

while (leftPoint !== rightPoint) {
  leftPoint++;
  rightPoint--;
}
#+end_src

This would cause an infinite loop. I think it's because left and right point are
never equal to each other

So I looked at ChatGPT and it suggested to use a <= operator instead

#+begin_src js
function reverseString(s) {
  if (s.length === 1) return;

  let leftPoint = 0;
  let rightPoint = s.length - 1;

  while (leftPoint <= rightPoint) {
    const temp = s[leftPoint];
    s[leftPoint] = s[rightPoint];
    s[rightPoint] = temp;
    leftPoint++;
    rightPoint--;
  }
  return s;
}
#+end_src

* 1528. Shuffle String
** Description
You are given a string s and an integer array indices of the same length. The
string s will be shuffled such that the character at the ith position moves to
indices[i] in the shuffled string.

Return the shuffled string.

** Examples
*Example 1*
[[https://assets.leetcode.com/uploads/2020/07/09/q1.jpg]]

#+begin_src
Input: s = "codeleet", indices = [4,5,6,7,0,2,1,3]
Output: "leetcode"
Explanation: As shown, "codeleet" becomes "leetcode" after shuffling.

#+end_src

*Example 2:*

#+begin_src
Input: s = "abc", indices = [0,1,2]
Output: "abc"
Explanation: After shuffling, each character remains in its position.
#+end_src

** Submissions
/Runtime: 60 ms/ - beats 93.32%
/Memory: 43.9 MB/ - beats 96.44%

Very easy

#+begin_src js
return restoreString('codeleet', [4, 5, 6, 7, 0, 2, 1, 3]);
/**
 * @param {string} s
 * @param {number[]} indices
 * @returns {string}
 */
function restoreString(s, indices) {
  if (s.length !== indices.length) {
    return console.log('Invalid parameter lengths');
  }
  let restored = new Array(s.length).fill('');
  for (let i = 0; i < indices.length; i++) {
    restored[indices[i]] = s[i];
  }
  return restored.join('');
}
#+end_src

#+RESULTS:
: leetcode

* 1678. Goal Parser
** Description
/Difficulty: Easy/

You own a *Goal Parser* that can interpret a string =command=. The =command= consists
of an alphabet of ="G"=, ="()"= and/or ="(al)"= in some order. The Goal Parser will
interpret ="G"= as the string ="G"=, ="()"= as the string ="o"=, and ="(al)"= as the
string ="al"= . The interpreted strings are then concatenated in the original
order.

Given the string =command=, return /the *Goal Parser*'s interpretation of/  =command= .

** Examples
*Example 1:*

#+begin_src
Input: command = "G()(al)"
Output: "Goal"
Explanation:Â The Goal Parser interprets the command as follows:
G -> G
() -> o
(al) -> al
The final concatenated result is "Goal".

#+end_src

*Example 2:*

#+begin_src
Input: command = "G()()()()(al)"
Output: "Gooooal"

#+end_src

*Example 3:*

#+begin_src
Input: command = "(al)G(al)()()G"
Output: "alGalooG"

#+end_src

** Constraints

- ~1 <= command.length <= 100~
- =command= consists of ="G"=, ="()"=, and/or ="(al)"=  in some order.

** Submissions
*** Submission 1
/Runtime: 63 ms/ - beats 56.32%
/Memory: 42.2 MB/ - beats 36.44%

I thought about using an object for this solution, but didn't know how I'd
implement it

#+begin_src js
const command = 'G()(al)';
// const command = 'G()()()()(al)';
return goalParser(command);

/**
 * @param {string} command
 * @returns  {string}
 */
function goalParser(command) {
  let parsed = '';
  for (let i = 0; i < command.length; i++) {
    if (command[i] === '(' && command[i + 1] === ')') {
      parsed += 'o';
      i += 1;
    } else if (command[i] === '(' && command[i + 1] === 'a') {
      parsed += 'al';
      i += 3;
    } else {
      parsed += command[i];
    }
  }
  return parsed;
}
#+end_src

#+RESULTS:
: Goal

*** Submission 2

#+begin_src js
const command = 'G()(al)';
// const command = 'G()()()()(al)';
console.log(goalParser(command));

/**
 * @param {string} command
 * @returns  {string}
 */
function goalParser(command) {
  let parsed = '';
  const dict = {
    G: 'G',
    '()': 'o',
    '(al)': 'al',
  };
  let temp = '';
  for (let i = 0; i < command.length; i++) {
    temp += command[i];
    if (dict[temp]) {
      parsed += dict[temp];
      temp = '';
    }
  }
  return parsed;
}


#+end_src
